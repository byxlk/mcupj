C51 COMPILER V9.52.0.0   LED_CTRL                                                          02/18/2021 00:01:37 PAGE 1   


C51 COMPILER V9.52.0.0, COMPILATION OF MODULE LED_CTRL
OBJECT MODULE PLACED IN .\Objects\led_ctrl.obj
COMPILER INVOKED BY: C:\Keil_c51\C51\BIN\C51.EXE code\led_ctrl.c LARGE BROWSE INCDIR(.\code;.\code\stclib) DEBUG OBJECTE
                    -XTEND PRINT(.\Listing\led_ctrl.lst) OBJECT(.\Objects\led_ctrl.obj)

line level    source

   1          #include "api_config.h"
   2          
   3          #define FLASH_TIME (100)  /* 10x10 ms ��ƽ��ת */
   4          
   5          /* 00�� Ϩ��  01/10 ��˸ 11������ */
   6          struct ledStatsManage {
   7              u8 msr_dy:2;//��Դ
   8              u8 msr_lp:2; //ȱ��
   9              u8 msr_ss:2; //����
  10              u8 msr_cz:2; //����
  11              u8 msr_xj:2; //�½�
  12              u8 msr_qz:2; //Ƿ��
  13              u8 msr_tb:2; //ͬ��
  14              u8 msr_qx:2; //��б
  15              u8 msr_tx:2; //ͨѶ
  16          
  17              u8 slv_zcg:2; //�󳬸�
  18              u8 slv_lp:2; //ȱ��
  19              u8 slv_cz:2; //����
  20              u8 slv_ss:2; //����
  21              u8 slv_qz:2; //Ƿ��
  22              u8 slv_xj:2; //�½�
  23              u8 slv_sk:2; //�ܿ�
  24              u8 slv_tx:2; //ͨѶ
  25              u8 slv_ycg:2; //�ҳ���
  26              u8 slv_bj:2; //����
  27          } ;
  28          static struct ledStatsManage ledCtrl = {0};
  29          
  30          void MSR_LedStatusCtrl(LEDCODE_DEF_E LedNo, bool StatusFlag)
  31          {
  32   1          switch(LedNo) {
  33   2              case MSR_LED_INCLINE_INDICAT:    ledCtrl.msr_qx  = StatusFlag? 0x0:0x3; break;
  34   2              case MSR_LED_OVER_LOADING:       ledCtrl.msr_cz  = StatusFlag? 0x0:0x3; break;
  35   2              case MSR_LED_UNDER_LOADING:      ledCtrl.msr_qz  = StatusFlag? 0x0:0x3; break;
  36   2              case MSR_LED_LOSS_PHASE:         ledCtrl.msr_lp  = StatusFlag? 0x0:0x3; break;
  37   2              case MSR_LED_SYNCHRO_START:      ledCtrl.msr_tb  = StatusFlag? 0x0:0x3; break;
  38   2              case MSR_LED_UP_INDICAT:         ledCtrl.msr_ss  = StatusFlag? 0x0:0x3; break;
  39   2              case MSR_LED_DOWN_INDICAT:       ledCtrl.msr_xj  = StatusFlag? 0x0:0x3; break;
  40   2              case MSR_LED_COMMUNICAT_INDICAT: ledCtrl.msr_tx  = StatusFlag? 0x0:0x3; break;
  41   2              case MSR_LED_POWER_START:        ledCtrl.msr_dy  = StatusFlag? 0x0:0x3; break;
  42   2              case MSR_LED_ALL:
  43   2                  ledCtrl.msr_qx  = StatusFlag? 0x0:0x3; 
  44   2                  ledCtrl.msr_cz  = StatusFlag? 0x0:0x3; 
  45   2                  ledCtrl.msr_qz  = StatusFlag? 0x0:0x3; 
  46   2                  ledCtrl.msr_lp  = StatusFlag? 0x0:0x3; 
  47   2                  ledCtrl.msr_tb  = StatusFlag? 0x0:0x3; 
  48   2                  ledCtrl.msr_ss  = StatusFlag? 0x0:0x3; 
  49   2                  ledCtrl.msr_xj  = StatusFlag? 0x0:0x3; 
  50   2                  ledCtrl.msr_tx  = StatusFlag? 0x0:0x3; 
  51   2                  ledCtrl.msr_dy  = StatusFlag? 0x0:0x3;    
  52   2                  break;
  53   2              default: break;
  54   2          }
C51 COMPILER V9.52.0.0   LED_CTRL                                                          02/18/2021 00:01:37 PAGE 2   

  55   1      }
  56          void MSR_LedFlashCtrl(LEDCODE_DEF_E LedNo)
  57          {
  58   1              switch(LedNo) {
  59   2              case MSR_LED_INCLINE_INDICAT:    ledCtrl.msr_qx  = 0x1; break;
  60   2              case MSR_LED_OVER_LOADING:       ledCtrl.msr_cz  = 0x1; break;
  61   2              case MSR_LED_UNDER_LOADING:      ledCtrl.msr_qz  = 0x1; break;
  62   2              case MSR_LED_LOSS_PHASE:         ledCtrl.msr_lp  = 0x1; break;
  63   2              case MSR_LED_SYNCHRO_START:      ledCtrl.msr_tb  = 0x1; break;
  64   2              case MSR_LED_UP_INDICAT:         ledCtrl.msr_ss  = 0x1; break;
  65   2              case MSR_LED_DOWN_INDICAT:       ledCtrl.msr_xj  = 0x1; break;
  66   2              case MSR_LED_COMMUNICAT_INDICAT: ledCtrl.msr_tx  = 0x1; break;
  67   2              case MSR_LED_POWER_START:        ledCtrl.msr_dy  = 0x1; break;
  68   2              case MSR_LED_ALL:
  69   2                  ledCtrl.msr_qx  = 0x1; 
  70   2                  ledCtrl.msr_cz  = 0x1; 
  71   2                  ledCtrl.msr_qz  = 0x1; 
  72   2                  ledCtrl.msr_lp  = 0x1; 
  73   2                  ledCtrl.msr_tb  = 0x1; 
  74   2                  ledCtrl.msr_ss  = 0x1; 
  75   2                  ledCtrl.msr_xj  = 0x1; 
  76   2                  ledCtrl.msr_tx  = 0x1; 
  77   2                  ledCtrl.msr_dy  = 0x1;    
  78   2                  break;
  79   2              default: break;
  80   2          }
  81   1      }
  82          
  83          void SLV_LedStatusCtrl(LEDCODE_DEF_E LedNo, bool StatusFlag)
  84          {
  85   1          switch( LedNo ) {
  86   2              case SLV_LED_ZCG_INDICAT:        ledCtrl.slv_zcg = (StatusFlag)? 0x0:0x3; break;
  87   2              case SLV_LED_OVER_LOADING:       ledCtrl.slv_cz  = (StatusFlag)? 0x0:0x3; break;
  88   2              case SLV_LED_UNDER_LOADING:      ledCtrl.slv_qz  = (StatusFlag)? 0x0:0x3; break;
  89   2              case SLV_LED_LOSS_PHASE:         ledCtrl.slv_lp  = (StatusFlag)? 0x0:0x3; break;
  90   2              case SLV_LED_SK_INDICAT:         ledCtrl.slv_sk  = (StatusFlag)? 0x0:0x3; break;
  91   2              case SLV_LED_UP_INDICAT:         ledCtrl.slv_ss  = (StatusFlag)? 0x0:0x3; break;
  92   2              case SLV_LED_DOWN_INDICAT:       ledCtrl.slv_xj  = (StatusFlag)? 0x0:0x3; break;
  93   2              case SLV_LED_COMMUNICAT_INDICAT: ledCtrl.slv_tx  = (StatusFlag)? 0x0:0x3; break;
  94   2              case SLV_LED_YCG_INDICAT:        ledCtrl.slv_ycg = (StatusFlag)? 0x0:0x3; break;
  95   2              case SLV_LED_WARN_INDICAT:       ledCtrl.slv_bj  = (StatusFlag)? 0x0:0x3; break;
  96   2              case SLV_LED_ALL:
  97   2                  ledCtrl.slv_zcg = (StatusFlag)? 0x0:0x3; 
  98   2                  ledCtrl.slv_ycg = (StatusFlag)? 0x0:0x3; 
  99   2                  ledCtrl.slv_lp  = (StatusFlag)? 0x0:0x3; 
 100   2                  ledCtrl.slv_bj  = (StatusFlag)? 0x0:0x3; 
 101   2                  ledCtrl.slv_sk  = (StatusFlag)? 0x0:0x3; 
 102   2                  ledCtrl.slv_tx  = (StatusFlag)? 0x0:0x3; 
 103   2                  ledCtrl.slv_xj  = (StatusFlag)? 0x0:0x3; 
 104   2                  ledCtrl.slv_qz  = (StatusFlag)? 0x0:0x3; 
 105   2                  ledCtrl.slv_ss  = (StatusFlag)? 0x0:0x3; 
 106   2                  ledCtrl.slv_cz  = (StatusFlag)? 0x0:0x3; 
 107   2                  break;
 108   2              default: break;
 109   2          }
 110   1      }
 111          
 112          void SLV_LedFlashCtrl(LEDCODE_DEF_E LedNo)
 113          {
 114   1          switch( LedNo ) {
 115   2              case SLV_LED_ZCG_INDICAT:        ledCtrl.slv_zcg = 0x1; break;
 116   2              case SLV_LED_OVER_LOADING:       ledCtrl.slv_cz  = 0x1; break;
C51 COMPILER V9.52.0.0   LED_CTRL                                                          02/18/2021 00:01:37 PAGE 3   

 117   2              case SLV_LED_UNDER_LOADING:      ledCtrl.slv_qz  = 0x1; break;
 118   2              case SLV_LED_LOSS_PHASE:         ledCtrl.slv_lp  = 0x1; break;
 119   2              case SLV_LED_SK_INDICAT:         ledCtrl.slv_sk  = 0x1; break;
 120   2              case SLV_LED_UP_INDICAT:         ledCtrl.slv_ss  = 0x1; break;
 121   2              case SLV_LED_DOWN_INDICAT:       ledCtrl.slv_xj  = 0x1; break;
 122   2              case SLV_LED_COMMUNICAT_INDICAT: ledCtrl.slv_tx  = 0x1; break;
 123   2              case SLV_LED_YCG_INDICAT:        ledCtrl.slv_ycg = 0x1; break;
 124   2              case SLV_LED_WARN_INDICAT:       ledCtrl.slv_bj  = 0x1; break;
 125   2              case SLV_LED_ALL:
 126   2                  ledCtrl.slv_zcg = 0x1; 
 127   2                  ledCtrl.slv_ycg = 0x1; 
 128   2                  ledCtrl.slv_lp  = 0x1; 
 129   2                  ledCtrl.slv_bj  = 0x1; 
 130   2                  ledCtrl.slv_sk  = 0x1; 
 131   2                  ledCtrl.slv_tx  = 0x1; 
 132   2                  ledCtrl.slv_xj  = 0x1; 
 133   2                  ledCtrl.slv_qz  = 0x1; 
 134   2                  ledCtrl.slv_ss  = 0x1; 
 135   2                  ledCtrl.slv_cz  = 0x1; 
 136   2                  break;
 137   2              default: break;
 138   2          }
 139   1      }
 140          
 141          void ledStatusManageService(u32 iSec)
 142          {
 143   1          if( isMasterDevice()) {
 144   2              //��б
 145   2              if(ledCtrl.msr_qx == 0x0)      MSR_LED_Incline_Indicat = 1;
 146   2              else if(ledCtrl.msr_qx == 0x3) MSR_LED_Incline_Indicat = 0;
 147   2              else { if((iSec % FLASH_TIME) == 0) MSR_LED_Incline_Indicat = ~MSR_LED_Incline_Indicat; }
 148   2              //��Դ
 149   2              if(ledCtrl.msr_dy == 0x0)      MSR_LED_Power_Start = 1;
 150   2              else if(ledCtrl.msr_dy == 0x3) MSR_LED_Power_Start = 0;
 151   2              else { if((iSec % FLASH_TIME) == 0) MSR_LED_Power_Start = ~MSR_LED_Power_Start; }
 152   2              //ȱ��
 153   2              if(ledCtrl.msr_lp == 0x0)      MSR_LED_Loss_Phase = 1;
 154   2              else if(ledCtrl.msr_lp == 0x3) MSR_LED_Loss_Phase = 0;
 155   2              else { if((iSec % FLASH_TIME) == 0) MSR_LED_Loss_Phase = ~MSR_LED_Loss_Phase; }
 156   2              //����
 157   2              if(ledCtrl.msr_ss == 0x0)      MSR_LED_Up_Indicat = 1;
 158   2              else if(ledCtrl.msr_ss == 0x3) MSR_LED_Up_Indicat = 0;
 159   2              else { if((iSec % FLASH_TIME) == 0) MSR_LED_Up_Indicat = ~MSR_LED_Up_Indicat; }
 160   2              //����
 161   2              if(ledCtrl.msr_cz == 0x0)      MSR_LED_Over_Loading = 1;
 162   2              else if(ledCtrl.msr_cz == 0x3) MSR_LED_Over_Loading = 0;
 163   2              else { if((iSec % FLASH_TIME) == 0) MSR_LED_Over_Loading = ~MSR_LED_Over_Loading; }
 164   2              //�½�
 165   2              if(ledCtrl.msr_xj == 0x0)      MSR_LED_Down_Indicat = 1;
 166   2              else if(ledCtrl.msr_xj == 0x3) MSR_LED_Down_Indicat = 0;
 167   2              else { if((iSec % FLASH_TIME) == 0) MSR_LED_Down_Indicat = ~MSR_LED_Down_Indicat; }
 168   2              //Ƿ��
 169   2              if(ledCtrl.msr_qz == 0x0)      MSR_LED_Under_Loading = 1;
 170   2              else if(ledCtrl.msr_qz == 0x3) MSR_LED_Under_Loading = 0;
 171   2              else { if((iSec % FLASH_TIME) == 0) MSR_LED_Under_Loading = ~MSR_LED_Under_Loading; }
 172   2              //ͬ��
 173   2              if(ledCtrl.msr_tb == 0x0)      MSR_LED_Synchro_Start = 1;
 174   2              else if(ledCtrl.msr_tb == 0x3) MSR_LED_Synchro_Start = 0;
 175   2              else { if((iSec % FLASH_TIME) == 0) MSR_LED_Synchro_Start = ~MSR_LED_Synchro_Start; }
 176   2              //ͨѶ
 177   2              if(ledCtrl.msr_tx == 0x0)      MSR_LED_Communicat_Indicat = 1;
 178   2              else if(ledCtrl.msr_tx == 0x3) MSR_LED_Communicat_Indicat = 0;
C51 COMPILER V9.52.0.0   LED_CTRL                                                          02/18/2021 00:01:37 PAGE 4   

 179   2              else { if((iSec % FLASH_TIME) == 0) MSR_LED_Communicat_Indicat = ~MSR_LED_Communicat_Indicat; }
 180   2          } else {
 181   2              //ȱ��
 182   2              if(ledCtrl.slv_lp == 0x0)      SLV_LED_Loss_Phase = 1;
 183   2              else if(ledCtrl.slv_lp == 0x3) SLV_LED_Loss_Phase = 0;
 184   2              else { if((iSec % FLASH_TIME) == 0) SLV_LED_Loss_Phase = ~SLV_LED_Loss_Phase; }
 185   2              //����
 186   2              if(ledCtrl.slv_cz == 0x0)      SLV_LED_Over_Loading = 1;
 187   2              else if(ledCtrl.slv_cz == 0x3) SLV_LED_Over_Loading = 0;
 188   2              else { if((iSec % FLASH_TIME) == 0) SLV_LED_Over_Loading = ~SLV_LED_Over_Loading; }
 189   2              //����
 190   2              if(ledCtrl.slv_ss == 0x0)      SLV_LED_Up_Indicat = 1;
 191   2              else if(ledCtrl.slv_ss == 0x3) SLV_LED_Up_Indicat = 0;
 192   2              else { if((iSec % FLASH_TIME) == 0) SLV_LED_Up_Indicat = ~SLV_LED_Up_Indicat; }
 193   2              //Ƿ��
 194   2              if(ledCtrl.slv_qz == 0x0)      SLV_LED_Under_Loading = 1;
 195   2              else if(ledCtrl.slv_qz == 0x3) SLV_LED_Under_Loading = 0;
 196   2              else { if((iSec % FLASH_TIME) == 0) SLV_LED_Under_Loading = ~SLV_LED_Under_Loading; }
 197   2              //�½�
 198   2              if(ledCtrl.slv_xj == 0x0)      SLV_LED_Down_Indicat = 1;
 199   2              else if(ledCtrl.slv_xj == 0x3) SLV_LED_Down_Indicat = 0;
 200   2              else { if((iSec % FLASH_TIME) == 0) SLV_LED_Down_Indicat = ~SLV_LED_Down_Indicat; }
 201   2              //�ܿ�
 202   2              if(ledCtrl.slv_sk == 0x0)      SLV_LED_SK_Indicat = 1;
 203   2              else if(ledCtrl.slv_sk == 0x3) SLV_LED_SK_Indicat = 0;
 204   2              else { if((iSec % FLASH_TIME) == 0) SLV_LED_SK_Indicat = ~SLV_LED_SK_Indicat; }
 205   2              //ͨѶ
 206   2              if(ledCtrl.slv_tx == 0x0)      SLV_LED_Communicat_Indicat = 1;
 207   2              else if(ledCtrl.slv_tx == 0x3) SLV_LED_Communicat_Indicat = 0;
 208   2              else { if((iSec % FLASH_TIME) == 0) SLV_LED_Communicat_Indicat = ~SLV_LED_Communicat_Indicat; }
 209   2              //�ҳ���
 210   2              if(ledCtrl.slv_ycg == 0x0)      SLV_LED_YCG_Indicat = 1;
 211   2              else if(ledCtrl.slv_ycg == 0x3) SLV_LED_YCG_Indicat = 0;
 212   2              else { if((iSec % FLASH_TIME) == 0) SLV_LED_YCG_Indicat = ~SLV_LED_YCG_Indicat; }
 213   2              //�󳬸�
 214   2              if(ledCtrl.slv_zcg == 0x0)      SLV_LED_ZCG_Indicat = 1;
 215   2              else if(ledCtrl.slv_zcg == 0x3) SLV_LED_ZCG_Indicat = 0;
 216   2              else { if((iSec % FLASH_TIME) == 0) SLV_LED_ZCG_Indicat = ~SLV_LED_ZCG_Indicat; }
 217   2              //����
 218   2              if(ledCtrl.slv_bj == 0x0)      SLV_LED_Warn_Indicat = 1;
 219   2              else if(ledCtrl.slv_bj == 0x3) SLV_LED_Warn_Indicat = 0;
 220   2              else { if((iSec % FLASH_TIME) == 0) SLV_LED_Warn_Indicat = ~SLV_LED_Warn_Indicat; }
 221   2          }
 222   1      }
 223          
 224          #if TEST_MODE
 225          void ledLight_Test(bool StatusFlag)
 226          {
 227   1          if( isMasterDevice()) {
 228   2              MSR_LedStatusCtrl(MSR_LED_INCLINE_INDICAT,    StatusFlag);
 229   2              MSR_LedStatusCtrl(MSR_LED_OVER_LOADING,       StatusFlag);
 230   2              MSR_LedStatusCtrl(MSR_LED_UNDER_LOADING,      StatusFlag);
 231   2              MSR_LedStatusCtrl(MSR_LED_LOSS_PHASE,         StatusFlag);
 232   2              MSR_LedStatusCtrl(MSR_LED_SYNCHRO_START,      StatusFlag);
 233   2              MSR_LedStatusCtrl(MSR_LED_UP_INDICAT,         StatusFlag);
 234   2              MSR_LedStatusCtrl(MSR_LED_DOWN_INDICAT,       StatusFlag);
 235   2              MSR_LedStatusCtrl(MSR_LED_COMMUNICAT_INDICAT, StatusFlag);
 236   2              MSR_LedStatusCtrl(MSR_LED_POWER_START,        StatusFlag);
 237   2          } else {
 238   2              MSR_LedStatusCtrl(MSR_LED_INCLINE_INDICAT,    StatusFlag);
 239   2              MSR_LedStatusCtrl(MSR_LED_OVER_LOADING,       StatusFlag);
 240   2              MSR_LedStatusCtrl(MSR_LED_UNDER_LOADING,      StatusFlag);
C51 COMPILER V9.52.0.0   LED_CTRL                                                          02/18/2021 00:01:37 PAGE 5   

 241   2              MSR_LedStatusCtrl(MSR_LED_LOSS_PHASE,         StatusFlag);
 242   2              MSR_LedStatusCtrl(MSR_LED_SYNCHRO_START,      StatusFlag);
 243   2              MSR_LedStatusCtrl(MSR_LED_UP_INDICAT,         StatusFlag);
 244   2              MSR_LedStatusCtrl(MSR_LED_DOWN_INDICAT,       StatusFlag);
 245   2              MSR_LedStatusCtrl(MSR_LED_COMMUNICAT_INDICAT, StatusFlag);
 246   2              MSR_LedStatusCtrl(MSR_LED_POWER_START,        StatusFlag);
 247   2          }
 248   1      }
 249          #endif


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =   2702    ----
   CONSTANT SIZE    =   ----    ----
   XDATA SIZE       =      5       4
   PDATA SIZE       =   ----    ----
   DATA SIZE        =   ----    ----
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----       3
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
